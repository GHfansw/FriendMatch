<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
	http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         id="WebApp_ID" version="3.1">
	
    <!-- web.xml文件中需要配置的信息有: -->
    <!-- 1、防止乱码的过滤器 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

     <!-- 2.配置过滤器 --> 
     
     <!-- 3.配置一个监听器将请求转发给 Spring框架 -->
     <!--配置监听request和session信息变化的监听器  -->
<!--      <listener> -->
<!--   	     <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class> -->
<!--      </listener> -->
	 <listener>
	 	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
     </listener>
     
     <!-- 4.配置一个参数，告诉容器，spring配置文建的位置 -->
     <!--加载spring的ioc容器
	  	spring的配置文件一般要跟springmvc的配置文件分开  -->
	 <context-param>
	  	<param-name>contextConfigLocation</param-name>
	  	<param-value>classpath:spring/spring-mybatis.xml</param-value>
	 </context-param>
     
    <!-- 5.配置springmvc的DispatcherServlet 
			springMVC的ioc容器包括控制层的注册以及涉及到springmvc的相关配置 -->
	<!--配置前端的控制器 (servlet),拦截所有请求  -->
	<servlet>
 		<servlet-name>springmvc</servlet-name>
 		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
 		<!--如果不配置此初始化参数，springmvc会默认去加载classpath下面名称为  
 			[servlet-name]-servlet.xml(springmvc-serlvet.xml) -->
 		<init-param>
 			<param-name>contextConfigLocation</param-name>
 			<param-value>classpath:spring/spring-mvc.xml</param-value>
 		</init-param>
        <load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!--
			1:可以配置*.do,*.action 需要你在所有页面请求的url带.do或者.action的后缀
			2:也可以配置/ ，此工程所有请求（包括.do .action,js/image/css)都会由springmvc解析
				所以要对上述的静态文件资源进行过滤
			3:配置 /* ，返回的jsp也会有springmvc解析 ，不支持
			总结:一般配置*.do，或者 *.action;如果需要restful风格的接口,最后用/来标识
		  -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
        <url-pattern>*.css</url-pattern>
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.png</url-pattern>
        <url-pattern>*.gif</url-pattern>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
     
     <!-- 6.配置jsp标签 -->
<!--      <jsp-config> -->
<!--         <taglib> -->
<!--             <taglib-uri>/WEB-INF/struts-tags.tld</taglib-uri> -->
<!--             <taglib-location>/WEB-INF/struts-tags.tld</taglib-location> -->
<!--         </taglib> -->
<!--      </jsp-config> -->
     
     <!-- 7.错误页面 -->
     <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/view/error.jsp</location>
     </error-page>
     
     <!-- 8.首页，欢迎页面 -->
     <welcome-file-list>
        <welcome-file>/WEB-INF/view/login.jsp</welcome-file>
     </welcome-file-list>
     
     <!-- 9.session登出时间 -->
     <session-config>
        <session-timeout>30</session-timeout>
     </session-config>
</web-app>